import socket 
import os
import hmac
import threading
from hashlib import sha512
from cryptography.fernet import Fernet
from auth import SECRET_PASS
from time import ctime

PORT = 5050
FORMAT = 'utf-8'
SIZE = 1024

SERVER = socket.gethostbyname(socket.gethostname())
ADDR = (SERVER, PORT)
      
print(f"[STARTING] Server is starting on {SERVER}")
server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
server.bind(ADDR)
server.listen(2)
print(f"[LISTENING] Server is listening on {SERVER}")
conn, addr = server.accept()
print(f"[NEW CONNECTION] {addr} connected.")

def auth_client(username,password):
    username.send(str.encode("Enter Username: "))
    username_recv = username.recv(SIZE)
    username_recv = username_recv.decode(FORMAT)
    password.send(str.encode("Enter Password: "))
    password_recv = password.recv(SIZE)
    password_recv = hmac.new(password_recv, digestmod=sha512).hexdigest()
    if(username_recv == 'admin' and password_recv == SECRET_PASS):
        conn.send(str.encode("Authorized"))
        auth_user()
    else:
        conn.send(str.encode(f"Server: Welcome to the Chat {SERVER}"))
        client_chat()


auth_client_handler = threading.Thread(target=auth_client, args=(conn,conn))
auth_client_handler.start()

def auth_user():

    key = Fernet.generate_key()

    f = open("test.txt", "rb")
    file_data = f.read()
    f.close()

    fernet = Fernet(key)
    encrypted = fernet.encrypt(file_data)

    conn.send(encrypted)
    print("[DATA SENT] File sent.")

    print("[DATA SENT] Key sent.")
    conn.send(key)
    
    client_chat()

def client_chat():
    print()
    print("[CONNECTION ESTABLISHED] Client is now chatting.")
    while True:
        incoming_message=conn.recv(SIZE)
        incoming_message=incoming_message.decode(FORMAT)
        if(incoming_message == 'exit'):
            conn.send(str.encode("bye"))
            print("[CLIENT EXITED]")
            print()
            break       
        else:
            print(f'{[ctime()]} Client:>',incoming_message)
            message=input(str(f'{[ctime()]} You:> '))
            message=message.encode(FORMAT)
            conn.send(message)
try:
    conn, addr = server.accept()
    print(f"[NEW CONNECTION] {addr} connected.")
    auth_client_handler = threading.Thread(target=auth_client, args=(conn,conn))
    auth_client_handler.start()

except KeyboardInterrupt:
    os._exit(0)